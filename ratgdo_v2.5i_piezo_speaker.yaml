substitutions:
  rtttl_pin: D8
  boot_rtttl: "The Simpsons:d=4,o=5,b=160:c.6,e6,f#6,8a6,g.6,e6,c6,8a,8f#,8f#,8f#,2g,8p,8p,8f#,8f#,8f#,8g,a#.,8c6,8c6,8c6,c6"
  
  open_alarm: "true"
  open_alarm_rtttl: "two_short:d=4,o=6,b=100:c,p,c"
  # open_alarm_rtttl: 'long:d=1,o=6,b=100:c'
  # open_alarm_rtttl: 'open_pulse:d=16,o=5,b=100:c,c6,p.,c,c6,p.,c,c6,p.'
  # open_alarm_rtttl: 'open_slide:d=128,o=5,b=100:c,d,e,g,4c6.,4p,c,d,e,g,4c6.,4p'
  
  close_alarm: "true"
  #close_alarm_rtttl: "two_short:d=4,o=5,b=100:c,p,c"
  close_alarm_rtttl: 'long:d=1,o=5,b=100:c'
  # close_alarm_rtttl: 'close_pulse:d=16,o=5,b=100:c6,c,p.,c6,c,p.,c6,c,p.'
  # close_alarm_rtttl: 'close_slide:d=128,o=5,b=100:c6,g,e,d,4c.,4p,c6,g,e,d,4c.,4p'

packages:
  remote_package:
    url: https://github.com/jrhubott/esphome-ratgdo-packages
    ref: main # optional
    files: ratgdo_v2.5i_base.yaml
    refresh: 1s # optional

dashboard_import:
  package_import_url: github://jrhubott/esphome-ratgdo-packages/ratgdo_v2.5i_piezo_speaker.yaml

esphome:
  project:
    name: esphome.project-ratgdo-piezo_speaker
    version: "1.0"

  on_boot:
    priority: -100
    # ...
    then:
      - rtttl.play:
          rtttl: ${boot_rtttl}
      - wait_until:
          not: rtttl.is_playing

output:
  - platform: esp8266_pwm
    pin: ${rtttl_pin}
    id: rtttl_out


rtttl:
  output: rtttl_out
  on_finished_playback:
    - logger.log: 'rttl playback ended!'

cover:
  - platform: template
    id: garage_door_cover
    name: "Door"
    device_class: garage
    has_position: true
    optimistic: false
    assumed_state: false
    
    lambda: |-
      return id(${id_prefix}_garage_door).position;
    position_action:
      - if:
          condition:
            lambda: "return id(${id_prefix}_garage_door).position > pos;"
          then:
            - if:
                condition:
                  lambda: "return $close_alarm;"
                then:
                  - rtttl.play:
                      rtttl: $close_alarm_rtttl
                  - wait_until:
                      not: rtttl.is_playing
            - lambda: |-
                auto call = id(${id_prefix}_garage_door).make_call();
                // set attributes
                call.set_position(pos);
                call.perform();
                
    close_action:
      - if:
          condition:
            lambda: "return id(${id_prefix}_garage_door).position > COVER_CLOSED;"
          then:
            - if:
                condition:
                  lambda: "return $close_alarm;"
                then:
                  - rtttl.play:
                      rtttl: $close_alarm_rtttl
                  - wait_until:
                      not: rtttl.is_playing
            - cover.close: ${id_prefix}_garage_door
    open_action:
      - if:
          condition:
            lambda: "return id(${id_prefix}_garage_door).position < COVER_OPEN;"
          then:
            - if:
                condition:
                  lambda: "return $open_alarm;"
                then:
                  - rtttl.play:
                      rtttl: $open_alarm_rtttl
                  - wait_until:
                      not: rtttl.is_playing
            - cover.open: ${id_prefix}_garage_door
    stop_action:
      - cover.stop: ${id_prefix}_garage_door

